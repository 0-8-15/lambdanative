/*
LambdaNative - a cross-platform Scheme framework
Copyright (c) 2009-2013, University of British Columbia
All rights reserved.

Redistribution and use in source and binary forms, with or
without modification, are permitted provided that the
following conditions are met:

* Redistributions of source code must retain the above
copyright notice, this list of conditions and the following
disclaimer.

* Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials
provided with the distribution.

* Neither the name of the University of British Columbia nor
the names of its contributors may be used to endorse or
promote products derived from this software without specific
prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include <stdio.h>

@SYS_BB10_C@

#include <bps/screen.h>
#include <bps/bps.h>
#include <bps/event.h>
#include <bps/virtualkeyboard.h>

#include <bps/sensor.h>
#include <bps/geolocation.h>

#include <bps/audiomixer.h>
#include <bps/audiodevice.h>

#include <GLES/gl.h>
#include <glview/glview.h>

#include <screen/screen.h>
#include <sys/keycodes.h>

#include <CONFIG.h>

static int screen_height, screen_width;

static double accel_x, accel_y, accel_z;

double qnx_accel_getx() { return accel_x; }
double qnx_accel_gety() { return accel_y; }
double qnx_accel_getz() { return accel_z; }

static double gyro_yaw, gyro_pitch, gyro_roll;

double qnx_gyro_yaw() { return gyro_yaw; }
double qnx_gyro_pitch() { return gyro_pitch; }
double qnx_gyro_roll() { return gyro_roll; }

static double location_latitude, location_longitude;
static double location_altitude, location_accuracy, location_timestamp;

double qnx_location_getlongitude() { return location_longitude; }
double qnx_location_getlatitude() { return location_latitude; }
double qnx_location_getaltitude() { return location_altitude; }
double qnx_location_getaccuracy() { return location_accuracy; }
double qnx_location_gettimestamp() { return location_timestamp; }

#ifdef USE_AUDIO

static snd_pcm_t *pcm_handle;
static snd_pcm_info_t info;
static snd_pcm_channel_params_t pp;
static snd_pcm_channel_setup_t setup;
static snd_pcm_channel_info_t pi;

static snd_mixer_t *mixer_handle;
static snd_mixer_group_t group;

static void audio_setup(char *dev_name)
{
  char *defdev_name="pcmPreferred";
  if (snd_pcm_open_name(&pcm_handle, (dev_name?dev_name:defdev_name), SND_PCM_OPEN_PLAYBACK)<0) return;
  if (snd_pcm_info(pcm_handle, &info) < 0) goto setup_failure; 
  card = info.card;
  memset(&pi, 0, sizeof(pi));
  pi.channel = SND_PCM_CHANNEL_PLAYBACK;
  if (snd_pcm_plugin_info(pcm_handle, &pi)< 0) goto setup_failure; 
  memset(&pp, 0, sizeof(pp));
  pp.mode = SND_PCM_MODE_BLOCK;
  pp.channel = SND_PCM_CHANNEL_PLAYBACK;
  pp.start_mode = SND_PCM_START_FULL;
  pp.stop_mode = SND_PCM_STOP_STOP;
  pp.buf.block.frag_size = pi.max_fragment_size;
  if (fragsize != -1) { pp.buf.block.frag_size = fragsize; }
  pp.buf.block.frags_max = num_frags;
  pp.buf.block.frags_min = 1;
  pp.format.interleave = 1;
  pp.format.rate = 44100;
  pp.format.voices = 2;
  pp.format.format = SND_PCM_SFMT_S16_LE;
  strcpy(pp.sw_mixer_subchn_name, "Wave playback channel");
  if (snd_pcm_plugin_params(pcm_handle, &pp) < 0) goto setup_failure; 
  if (snd_pcm_plugin_prepare(pcm_handle, SND_PCM_CHANNEL_PLAYBACK) < 0) goto setup_failure; 
  memset(&setup, 0, sizeof(setup));
  memset(&group, 0, sizeof(group));
  setup.channel = SND_PCM_CHANNEL_PLAYBACK;
  setup.mixer_gid = &group.gid;
  if (snd_pcm_plugin_setup(pcm_handle, &setup) < 0) goto setup_failure; 
  if (group.gid.name[0] == 0) goto setup_failure; 
  if (snd_mixer_open(&mixer_handle, card, setup.mixer_device) < 0) goto setup_failure; 
  return;
setup_failed:
  snd_pcm_close(pcm_handle);
}

static void audio_push()
{
 
  if (tcgetpgrp(0) == getpid()) FD_SET(STDIN_FILENO, &rfds);
  FD_SET(snd_mixer_file_descriptor(mixer_handle), &rfds);
  FD_SET(snd_pcm_file_descriptor(pcm_handle, SND_PCM_CHANNEL_PLAYBACK), &wfds);
  rtn = max(snd_mixer_file_descriptor(mixer_handle), snd_pcm_file_descriptor(pcm_handle, SND_PCM_CHANNEL_PLAYBACK));
  if (select(rtn + 1, &rfds, &wfds, NULL, NULL) == -1) { goto fail5; }
  if (FD_ISSET(snd_pcm_file_descriptor(pcm_handle, SND_PCM_CHANNEL_PLAYBACK), &wfds)) {
     snd_pcm_channel_status_t status;
     int written = 0;
     if ((bytes_read = fread(sample_buffer, 1, min(samples - total_written, bsize), file)) <= 0) continue;
     written = snd_pcm_plugin_write(pcm_handle, sample_buffer, bytes_read);
     if (written < bytes_read) {
       memset(&status, 0, sizeof(status));
       status.channel = SND_PCM_CHANNEL_PLAYBACK;
       if (snd_pcm_plugin_status(pcm_handle, &status) < 0) { goto fail5; }
       if (status.status == SND_PCM_STATUS_READY ||
           status.status == SND_PCM_STATUS_UNDERRUN) {
         if (snd_pcm_plugin_prepare(pcm_handle, SND_PCM_CHANNEL_PLAYBACK) < 0) { goto fail5; }
       }
       if (written < 0) written = 0;
       written += snd_pcm_plugin_write(pcm_handle, sample_buffer + written, bytes_read - written);
     }
     total_written += written;
  }
  return;
fail5:
    snd_mixer_close(mixer_handle);
fail4:
    snd_pcm_close(pcm_handle);
fail3:
    free(sample_buffer);
    sample_buffer = NULL;
fail2:
    fclose(file);
fail1:
}

#endif // USE_AUDIO

static void init_cb(void *p)
{
// virtualkeyboard_request_events(0);

  glview_get_size(&screen_width, &screen_height);
  glViewport(0, 0, screen_width, screen_height);

#ifdef USE_ACCELEROMETER
  if (sensor_is_supported(SENSOR_TYPE_ACCELEROMETER)) {
    static const int rate = 25000;
    sensor_set_rate(SENSOR_TYPE_ACCELEROMETER, rate);
    sensor_set_skip_duplicates(SENSOR_TYPE_ACCELEROMETER, true);
    sensor_request_events(SENSOR_TYPE_ACCELEROMETER);
  }
#endif

#ifdef USE_GYROSCOPE
  if (sensor_is_supported(SENSOR_TYPE_GYROSCOPE)) {
    static const int rate = 25000;
    sensor_set_rate(SENSOR_TYPE_GYROSCOPE, rate);
    sensor_set_skip_duplicates(SENSOR_TYPE_GYROSCOPE, true);
    sensor_request_events(SENSOR_TYPE_GYROSCOPE);
  }
#endif

#ifdef USE_ORIENTATION
  if (sensor_is_supported(SENSOR_TYPE_GYROSCOPE)) {
    static const int rate = 250000;
    sensor_set_rate(SENSOR_TYPE_ORIENTATION, rate);
    sensor_set_skip_duplicates(SENSOR_TYPE_ORIENTATION, true);
    sensor_request_events(SENSOR_TYPE_ORIENTATION);
  }
#endif

#ifdef USE_GPS
  geolocation_request_events(0);
#endif

#ifdef USE_AUDIO
  audiodevice_request_events(0);
#endif  

  ffi_event(EVENT_INIT,screen_width,screen_height);
}

static void display_cb(void *p)
{
  ffi_event(EVENT_REDRAW,0,0);
}

static void resume_cb(void *p)
{
  ffi_event(EVENT_RESUME,0,0);
}

static void suspend_cb(void *p)
{
  ffi_event(EVENT_SUSPEND,0,0);
}

static void close_cb(void *p)
{
  ffi_event(EVENT_CLOSE,0,0);
  ffi_event(EVENT_TERMINATE,0,0);
}

static void event_cb(bps_event_t *event, int domain, int code, void *p)
{
  int screen_val, key_val, sym_val;
  int pos[2];
  int pointerid;

  if (screen_get_domain() == domain) {
    screen_event_t screen_event = screen_event_get_event(event);
    screen_get_event_property_iv(screen_event, SCREEN_PROPERTY_TYPE, &screen_val);
    switch (screen_val) {

      case SCREEN_EVENT_MTOUCH_TOUCH:
        screen_get_event_property_iv(screen_event, SCREEN_PROPERTY_TOUCH_ID, &pointerid);
        screen_get_event_property_iv(screen_event, SCREEN_PROPERTY_SOURCE_POSITION, pos);
#ifdef USE_MULTITOUCH
        ffi_event(EVENT_MULTITOUCH,(unsigned int)pointerid,0);
#endif
        ffi_event(EVENT_BUTTON1DOWN,pos[0],screen_height-pos[1]);
        break;

      case SCREEN_EVENT_MTOUCH_RELEASE:
        screen_get_event_property_iv(screen_event, SCREEN_PROPERTY_TOUCH_ID, &pointerid);
        screen_get_event_property_iv(screen_event, SCREEN_PROPERTY_SOURCE_POSITION, pos);
#ifdef USE_MULTITOUCH
        ffi_event(EVENT_MULTITOUCH,(unsigned int)pointerid,0);
#endif
        ffi_event(EVENT_BUTTON1UP,pos[0],screen_height-pos[1]);
        break;

      case SCREEN_EVENT_MTOUCH_MOVE:
        screen_get_event_property_iv(screen_event, SCREEN_PROPERTY_TOUCH_ID, &pointerid);
        screen_get_event_property_iv(screen_event, SCREEN_PROPERTY_SOURCE_POSITION, pos);
#ifdef USE_MULTITOUCH
        ffi_event(EVENT_MULTITOUCH,(unsigned int)pointerid,0);
#endif
        ffi_event(EVENT_MOTION,pos[0],screen_height-pos[1]);
        break;

      case SCREEN_EVENT_KEYBOARD:
        screen_get_event_property_iv(screen_event, SCREEN_PROPERTY_KEY_FLAGS, &key_val);
        if (key_val & KEY_DOWN) {
          screen_get_event_property_iv(screen_event, SCREEN_PROPERTY_KEY_SYM,&sym_val);
          if (sym_val>32&&sym_val<127) {
            ffi_event(EVENT_KEYPRESS, sym_val,0);
          }
        } else {
          screen_get_event_property_iv(screen_event, SCREEN_PROPERTY_KEY_SYM,&sym_val);
          if (sym_val>32&&sym_val<127) {
            ffi_event(EVENT_KEYRELEASE, sym_val,0);
          }
        }
        break;
     }
    return;
  } 
  if (domain == sensor_get_domain()) {
#ifdef USE_ACCELEROMETER
    if (code == SENSOR_ACCELEROMETER_READING) {
      float x,y,z;
      sensor_event_get_xyz(event,&x,&y,&z);
      accel_x = (double)x; accel_y = (double)y; accel_z=(double)z;
    }
#endif
#ifdef USE_GYROSCOPE
    if (code == SENSOR_GYROSCOPE_READING) {
      float x,y,z;
      sensor_event_get_xyz(event,&x,&y,&z);
      gyro_yaw = (double)x; gyro_pitch = (double)y; gyro_roll=(double)z;
    }
#endif 
#ifdef USE_ORIENTATION
    if (code == SENSOR_ORIENTATION_READING) {
      int angle = sensor_event_get_orientation_angle(event);
      int orientation=-1;
      switch (angle) {
        case 0: orientation=1; break;
        case 90: orientation=2; break;
        case 180: orientation=4; break;
        case 270: orientation=3; break;
      }
      if (orientation>0) {
       ffi_event(EVENT_ORIENTATION, orientation, 0);
      }
    }
#endif
    return;
  }
#ifdef USE_GPS
  if (domain == geolocation_get_domain()) {
    if (code == GEOLOCATION_INFO) {
      location_latitude = geolocation_event_get_latitude(event);
      location_longitude = geolocation_event_get_longitude(event);
      location_altitude = geolocation_event_get_altitude(event);
      location_accuracy = geolocation_event_get_accuracy(event);
      location_timestamp= (double)geolocation_event_get_utc_time(event);
    }
    return;
  }
#endif
#ifdef USE_AUDIO
  if (domain == audiodevice_get_domain()) {
    const char * audiodevice_path = audiodevice_event_get_path(event);
    if (audiodevice_path) { 
      audio_mixer_close(mixer_handle);
      audio_pcm_close(pcm_handle);
      audio_setup(audiodevice_path);
    }
    return;
  }
#endif
}

int main(int argc, char **argv)
{
  glview_initialize(GLVIEW_API_OPENGLES_11, &display_cb);
  glview_register_initialize_callback(&init_cb);
  glview_register_event_callback(&event_cb);
  glview_register_foreground_callback(&resume_cb);
  glview_register_background_callback(&suspend_cb);
  glview_register_finalize_callback(&close_cb);
  return glview_loop();
}

