#!/bin/sh
# LambdaNative - a cross-platform Scheme framework
# Copyright (c) 2009-2014, University of British Columbia
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the
# following conditions are met:
#
# * Redistributions of source code must retain the above
# copyright notice, this list of conditions and the following
# disclaimer.
#
# * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials
# provided with the distribution.
#
# * Neither the name of the University of British Columbia nor
# the names of its contributors may be used to endorse or
# promote products derived from this software without specific
# prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# lambdanative smoke test

echo "SMOKE TESTING..."
echo "------------------"
echo "This script performs preliminary testing of apps"
echo "Please run regularly, and make all apps pass the test!"
echo "------------------"

trap "rm *.core" 10 11 13

# save the current configuration
if [ -f config.cache ]; then
  cp config.cache smoke.config.cache
else
  if [ -f smoke.config.cache ]; then
    rm smoke.config.cache
  fi
fi

# allow smoking apps on the command line
if [ ! "X$1" = "X" ]; then
  apps=$@
else
  appdirs=`pwd`
  if [ ! "X$SYS_PATH" = "X" ]; then
    appdirs=$appdirs" "`echo $SYS_PATH | tr ':' ' '`
  fi
  . ./SETUP
  if [ ! "X$OVERLAY_PATH" = "X" ]; then
    appdirs=$appdirs" "`echo $OVERLAY_PATH | tr ':' ' '`
  fi 
  apps=
  for appdir in $appdirs; do
    newapps=`ls -1 $appdir/apps`
    for newapp in $newapps; do
      isnew=yes
      for oldapp in $apps; do
        if [ "X$oldapp" = "X$newapp" ]; then
          isnew=no
        fi
      done
      if [ $isnew = yes ]; then
         apps="$apps $newapp"
      fi
    done
  done
fi

if [ -f smoke.result ]; then
  rm smoke.result
fi
touch smoke.result

record_result()
{
   echo ">> $1 $2"
   echo "$1 $2" >> smoke.result
}

smoke() 
{
  a=$1
  echo "SMOKING $a.."
  ./configure $a > /dev/null
  if [ ! "X$?" = "X0" ]; then
    record_result $a "**FAIL"
    echo "ERROR: configure failed"
    return
  fi
  if [ ! -f config.cache ]; then
    record_result $a "**FAIL"
    echo "ERROR: configure failed"
    return
  fi
  . ./config.cache
  echo "=> Configured $SYS_APPNAME for platform $SYS_PLATFORM."
  SYS_APPFIX=
  if [ $SYS_PLATFORM = macosx ]; then
    SYS_APPFIX=".app"
  fi
  echo "=> Building $SYS_APPNAME.."
  make
  result=$?
  if [ ! "X$result" = "X0" ]; then
     record_result $a "**FAIL"
     echo "ERROR: make failed"
     return
  fi  
  appdir=`ls -1d ../lambdanative-cache/$SYS_PLATFORM/${SYS_APPNAME}${SYS_APPFIX}`
  appexe=`ls -1 ../lambdanative-cache/$SYS_PLATFORM/${SYS_APPNAME}${SYS_APPFIX}/${SYS_APPNAME}*`
  appexelocal="./"`basename $appexe`
  if [ "X$appexe" = "X" ] || [ ! -x "$appexe" ]; then
     record_result $a "**FAIL"
     echo "ERROR: make failed"
     return
  fi
  echo "=> Launching $SYS_APPNAME.."
  (
    sleep 2
    stillalive=`ps x | expand | sed 's/^ [ ]*//g' | grep "/${SYS_APPNAME}" | cut -f 1 -d " "`
    if [ ! "X$stillalive" = "X" ]; then
      for p in $stillalive; do
        kill -KILL $p > /dev/null 2> /dev/null
      done
    fi
    ) &
  here=`pwd`
  cd "$appdir"
  $appexelocal
  res=$?
  cd $here
  if [ $res = 0 ] || [ $res = 137 ]; then
     record_result $a "PASS"
  else
     echo "ERROR: launch failed"
     record_result $a "**FAIL"
  fi
}

for a in $apps; do
  smoke $a 
done
cat smoke.result

failed=`cat smoke.result | sed '/PASS/d' | wc -l | expand | sed 's/^ [ ]*//g'`
passed=`cat smoke.result | sed '/FAIL/d' | wc -l | expand | sed 's/^ [ ]*//g'`
count=`expr $failed + $passed`

echo "------------------"
echo "SMOKE TEST COMPLETE"
echo "SMOKED $count apps of which $failed failed"
if [ "X$failed" = "X0" ]; then
echo "++ Success: No Smokers"
fi
echo "All done."
echo "------------------"

if [ -f smoke.result ]; then
  rm smoke.result
fi

# restore the configuration
if [ -f smoke.config.cache ]; then
  mv smoke.config.cache config.cache
fi

# bring the terminal back to its senses
#reset 
stty sane

#eof
