private String getRegistrationId(Context context) {
  final SharedPreferences prefs = getGCMPreferences(context);
  String registrationId = prefs.getString(PROPERTY_REG_ID, "");
  if (registrationId.isEmpty()) {
    Log.i("@SYS_APPNAME@", "Registration not found.");
    return "";
  }
  int registeredVersion = prefs.getInt(PROPERTY_APP_VERSION, Integer.MIN_VALUE);
  int currentVersion = getAppVersion(context);
  if (registeredVersion != currentVersion) {
    Log.i("@SYS_APPNAME@", "App version changed.");
    return "";
  }
  return registrationId;
}

private SharedPreferences getGCMPreferences(Context context) {
  return getSharedPreferences(@SYS_APPNAME@.class.getSimpleName(),Context.MODE_PRIVATE);
}

private static int getAppVersion(Context context) {
  try {
    PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);
    return packageInfo.versionCode;
  } catch (NameNotFoundException e) {
    throw new RuntimeException("Could not get package name: " + e);
  }
}

private void registerInBackground() {
  new AsyncTask<Void, Void, String>() {
    @Override
    protected String doInBackground(Void... params) {
      String msg = "";
      try {
        if (gcm == null) {
          gcm = GoogleCloudMessaging.getInstance(context);
        }
        regid = gcm.register(SENDER_ID);
        msg = "Device registered, registration ID=" + regid;
        exportToken(regid);
        storeRegistrationId(context, regid);
      } catch (IOException ex) {
        msg = "Error :" + ex.getMessage();
      }
      return msg;
    }

    @Override
    protected void onPostExecute(String msg) {
      Log.i("@SYS_APPNAME@", msg);
    }
  }.execute(null, null, null);
}

private void storeRegistrationId(Context context, String regId) {
  final SharedPreferences prefs = getGCMPreferences(context);
  int appVersion = getAppVersion(context);
  Log.i("@SYS_APPNAME@", "Saving regId on app version " + appVersion);
  SharedPreferences.Editor editor = prefs.edit();
  editor.putString(PROPERTY_REG_ID, regId);
  editor.putInt(PROPERTY_APP_VERSION, appVersion);
  editor.commit();
}

private boolean checkPlayServices() {
  int resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);
  if (resultCode != ConnectionResult.SUCCESS) {
    if (GooglePlayServicesUtil.isUserRecoverableError(resultCode)) {
      GooglePlayServicesUtil.getErrorDialog(resultCode, this,
          PLAY_SERVICES_RESOLUTION_REQUEST).show();
    } else {
      Log.i("@SYS_APPNAME@", "This device is not supported.");
      finish();
    }
    return false;
  }
  return true;
}

native void exportToken(String token);
