#!/bin/sh
# LambdaNative - a cross-platform Scheme framework
# Copyright (c) 2009-2013, University of British Columbia
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the
# following conditions are met:
# 
# * Redistributions of source code must retain the above
# copyright notice, this list of conditions and the following
# disclaimer.
# 
# * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials
# provided with the distribution.
# 
# * Neither the name of the University of British Columbia nor
# the names of its contributors may be used to endorse or
# promote products derived from this software without specific
# prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

locatefile()
{
  file=
  dirs=$(echo "$SYS_PATH" | tr ":" "\n")
  for dir in $dirs; do
    tmp="$dir/$1"
    if [ ! "X$tmp" = "X" ]; then
      if [ -e $tmp ]; then
        file=$tmp
      fi
    fi
  done
  echo $file
}

# Allow use of a permanently overlay by declaring $OVERLAY_PATH in SETUP file
. ./SETUP
if [ ! "X$OVERLAY_PATH" = "X" ]; then
  SYS_PATH="$OVERLAY_PATH"
fi

if [ "X$SYS_PATH" = "X" ]; then
  SYS_PATH=`pwd`
else
#  SYS_PATH="$SYS_PATH:"`pwd`
  SYS_PATH=`pwd`":$SYS_PATH"
fi

if [ "X$1$2$3$4" = "X" ]; then
  echo "usage: ./configure <application> [platform] [release|debug] [verbose]"
  exit 1
fi

with_app=$1

platforms="android ios linux win32 macosx"
with_platform=
for platform in $platforms; do
  if [ ! "X"`echo "$@" | cut -f 2- -d " " | grep $platform | cut -c 1` = "X" ]; then
    if [ "X"$with_platform = "X" ]; then
      with_platform=$platform
    else 
      echo "ERROR: multiple platforms specified [$platform and $with_platform]"
      exit 1
    fi
  fi
done

with_mode=
if [ ! "X"`echo "$@" | cut -f 2- -d " " | grep release | cut -c 1` = "X" ]; then
  with_mode=release
fi
if [ ! "X"`echo "$@" | cut -f 2- -d " " | grep debug | cut -c 1` = "X" ]; then
  if [ "X"$with_mode = "X" ]; then
    with_mode=debug
  else 
     echo "ERROR: release and debug modes are mutually exclusive"
     exit 1
  fi
fi

with_verbose=
if [ ! "X"`echo "$@" | grep verbose | cut -c 1` = "X" ]; then 
  with_verbose="verbose "
fi
SYS_VERBOSE=$with_verbose

if [ "X$with_app" = "X" ]; then
  echo "ERROR: application not specified"
  exit 1
fi 

# search for application
appdir=`locatefile "apps/$with_app"`
if [ ! -d "$appdir" ]; then
  echo "ERROR: application $with_app not found"
  exit 1
fi

SYS_APPNAME=$with_app

# determine host platform
hostsys=`sh ./config.guess`
case "$hostsys" in
i686-pc-mingw32*) 
  SYS_HOSTPLATFORM="win32"
;;
*-linux-gnu*)
  SYS_HOSTPLATFORM="linux"
;;
i386-apple-darwin*)
  SYS_HOSTPLATFORM="macosx"
;;
i386-unknown-openbsd*)
  SYS_HOSTPLATFORM="openbsd"
;;
i386-unknown-netbsd*)
  SYS_HOSTPLATFORM="netbsd"
;;
*)
  echo "ERROR: this host platform is not supported."
  exit 1
;;
esac

# setup target platform
case "$with_platform" in
linux|ios|macosx|win32|android)
  SYS_PLATFORM=$with_platform
;;
*)
  if [ "X$with_platform" = "X" ]; then
    SYS_PLATFORM=$SYS_HOSTPLATFORM
  else
    echo "ERROR: unknown platform specified [$with_platform]"
    exit 1
  fi
;;
esac

if [ "X$with_mode" = "X" ]; then
  with_mode=normal
fi
SYS_MODE=$with_mode

echo "==> configured to build $SYS_APPNAME for $SYS_PLATFORM in $SYS_MODE ${SYS_VERBOSE}mode"
echo " == using source in $appdir"

cat > config.cache << EOF
SYS_PATH=$SYS_PATH
SYS_APPNAME=$SYS_APPNAME
SYS_HOSTPLATFORM=$SYS_HOSTPLATFORM
SYS_PLATFORM=$SYS_PLATFORM
SYS_MODE=$SYS_MODE
SYS_VERBOSE=$SYS_VERBOSE
EOF

